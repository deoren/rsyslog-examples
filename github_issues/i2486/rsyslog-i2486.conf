# Trigger segfault via this logger call:
#
#    logger -t "haproxy[123]" "Server bk_postfix/relay5 is UP/READY (leaving forced maintenance)."
#
# Versions tested/affected: 
#
#    8.32.0, 8.33.0.1f82e5cc315d
#

module(
    load="imuxsock"
    sysSock.use="on"
    SysSock.Annotate="on"
    SysSock.ParseTrusted="on"
)

# provides kernel logging support and enable non-kernel klog messages
# https://bugs.launchpad.net/ubuntu/+source/rsyslog/+bug/1531622
module(load="imklog" permitnonkernelfacility="on")

# provides --MARK-- message capability
module(load="immark")

# Used for picking up local files
module(load="imfile")

module(
    load="builtin:omfile"
    fileOwner="syslog"
    fileGroup="adm"
    dirOwner="syslog"
    dirGroup="adm"
    fileCreateMode="0640"
    dirCreateMode="0755"

    # a modern-style logfile format with high-precision timestamps and
    # timezone info. Since the RSYSLOG_FileFormat template is specified
    # already via '$ActionFileDefaultTemplate', we cannot set it again
    # here without rsyslog getting upset (svn.lib #1021).
    # template="RSYSLOG_FileFormat"
)

module(load="omstdout")

# Templates used for critical email alerts
template(name="mailBody" type="list") {
    constant(value="Reporting system: ")
    property(name="$myhostname")
    constant(value="\n")
    constant(value="Message reported: ")
    property(name="timereported" dateFormat="rfc3339")
    constant(value="\n")
    constant(value="Message received: ")
    property(name="timegenerated" dateFormat="rfc3339")

    # Add some whitespace to help separate the message from the "wall" of
    # details just prior.
    constant(value="\n\n")
    constant(value="Message: ")
    property(name="msg" droplastlf="on" )
    constant(value="\n")
}

template(name="haproxy-mailSubject" type="string" string="relay server is %$.relayserver% - status is %$.relayserver-status%")
template(name="haproxy-test-results" type="string" string="%$.subject%\n\n%$.body%\n")



if ($programname == 'haproxy') or ($app-name == 'haproxy') then {

    # Status change indicators to generate alerts for
    if ($msg contains ["is UP", "is DOWN"]) then {

        # Pattern to use for match/extraction:
        #
        # Message:  Server bk_postfix/relay1 is UP/READY (leaving forced maintenance).
        # regex that passes rubular.com:
        # Server bk_postfix\/(.*) is (.*) \((.*)\)
        #
        # It needs to be more specific though
        # Server bk_postfix\/([0-9A-Za-z]+) is ([0-9A-Za-z]+\/[0-9A-Za-z]+) \(([\s0-9A-Za-z]+)\)
        #set $.haproxy-status-regex = "Server bk_postfix\\/([0-9A-Za-z]+) is ([0-9A-Za-z]+\\/[0-9A-Za-z]+ \\([[:space:]0-9A-Za-z]+\\))";

        #Server bk_postfix\/([0-9A-Za-z]+) is ([0-9A-Za-z]+\/[0-9A-Za-z]+ \([[:space:]0-9A-Za-z]+\))

        # Need to extract the backend server node name and status
        set $.relayserver = re_extract($msg,
            "Server ([0-9A-Za-z-_]+)\\/([0-9A-Za-z]+) is ([0-9A-Za-z]+\\/[0-9A-Za-z]+ \\([[:space:]0-9A-Za-z]+\\))",
            0, 2,
            'unknown relay server');

        set $.relayserver-status = re_extract(
            $msg,
            "Server ([0-9A-Za-z]+)\\/([0-9A-Za-z]+) is ([0-9A-Za-z]+\\/[0-9A-Za-z]+ \\([[:space:]0-9A-Za-z]+\\))",
            0, 2,
            'unknown status'
        );

        set $.subject = exec_template("haproxy-mailSubject");
        set $.body = exec_template("mailBody");

        #action(name="emergency-alert-users" type="omusrmsg" users="*")
        action(
            type="omfile"
            name="reextract-test"
            template="haproxy-test-results"
            file="/var/log/rsyslog-testing.log"
        )

    }
}
